---
# Ansible 测试环境部署 Playbook
# 使用方法: ansible-playbook scripts/deploy-staging-ansible.yml

- name: 部署 LLM Learn 应用到测试环境
  hosts: staging_servers
  become: yes
  vars:
    app_name: "llm-learn"
    app_user: "llm-app"
    app_dir: "/opt/{{ app_name }}"
    docker_image: "ghcr.io/zzyReal666/python:develop"
    app_port: 7860
    environment: "staging"
    
  tasks:
    - name: 更新系统包
      apt:
        update_cache: yes
        upgrade: yes
      when: ansible_os_family == "Debian"
      
    - name: 安装必要的软件包
      apt:
        name:
          - docker.io
          - docker-compose
          - curl
          - git
          - python3-pip
        state: present
      when: ansible_os_family == "Debian"
      
    - name: 启动并启用 Docker 服务
      systemd:
        name: docker
        state: started
        enabled: yes
        
    - name: 创建应用用户
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: "{{ app_dir }}"
        
    - name: 创建应用目录
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    - name: 创建日志目录
      file:
        path: "{{ app_dir }}/logs"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    - name: 创建配置目录
      file:
        path: "{{ app_dir }}/config"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    - name: 复制 Docker Compose 文件
      template:
        src: docker-compose.staging.yml
        dest: "{{ app_dir }}/docker-compose.yml"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        
    - name: 创建环境变量文件
      template:
        src: templates/env.staging.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'
        
    - name: 创建 systemd 服务文件
      template:
        src: templates/llm-learn.service.j2
        dest: /etc/systemd/system/{{ app_name }}.service
        mode: '0644'
        
    - name: 重新加载 systemd
      systemd:
        daemon_reload: yes
        
    - name: 停止现有服务
      systemd:
        name: "{{ app_name }}"
        state: stopped
      ignore_errors: yes
        
    - name: 拉取最新 Docker 镜像
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: yes
        
    - name: 启动应用服务
      systemd:
        name: "{{ app_name }}"
        state: started
        enabled: yes
        
    - name: 等待服务启动
      wait_for:
        port: "{{ app_port }}"
        host: "{{ ansible_default_ipv4.address }}"
        delay: 10
        timeout: 60
        
    - name: 健康检查
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health"
        method: GET
        status_code: 200
      register: health_check
      retries: 3
      delay: 10
      until: health_check.status == 200
      
    - name: 显示部署结果
      debug:
        msg: |
          应用部署完成！
          访问地址: http://{{ ansible_default_ipv4.address }}:{{ app_port }}
          服务状态: {{ health_check.status }}
          
    - name: 清理旧镜像
      docker_image:
        name: "{{ docker_image }}"
        state: absent
      ignore_errors: yes
      
  handlers:
    - name: 重启应用服务
      systemd:
        name: "{{ app_name }}"
        state: restarted 